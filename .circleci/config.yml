version: 2.1

executors:
  node-pg-executor:
    docker:
      - image: cimg/node:15.11.0
        environment:
          NODE_ENV: test
          PORT: 5000
          PG_USER: postgres
          PG_HOST: localhost
          PG_PORT: 5432
          PG_DATABASE: snack_a_log_test
          TEST_DATABASE_URL: postgresql://postgres@localhost/snack_a_log_test
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_DB: snack_a_log_test
          POSTGRES_USER: postgres

commands:
  install_dependencies:
    description: Setup dependencies
    steps:
      - checkout
      - run:
          name: Install core dependencies
          command: npm install
      - run:
          name: Install back-end and front-end dependencies
          command: npm run install:all
  install_dockerize:
    description: Prepare docker container
    steps:
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
  setup_database:
    description: Setup database migrations and seeds
    steps:
      # Wait for Postgres connection to open.
      - run: dockerize -wait tcp://$PG_HOST:$PG_PORT -timeout 1m
      # Install psql client
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      # Create schema and seed the database
      - run: npm run db:setup
  run_application:
    description: Start both applications
    steps:
      - run:
          name: Run back-end and front-end servers
          command: npm run start
          background: true
      # Wait for server
      - run: dockerize -wait http://localhost:$PORT -timeout 1m

jobs:
  build_and_test_backend:
    executor: node-pg-executor
    working_directory: ~/repo
    steps:
      - install_dependencies
      - install_dockerize
      - setup_database
      - run_application
      - run:
          command: cd back-end && npm test
          name: Test backend

workflows:
  build_and_test:
    jobs:
      - build_and_test_backend
